// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Messages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - MessagesRoot

@implementation MessagesRoot

@end

#pragma mark - MessagesRoot_FileDescriptor

static GPBFileDescriptor *MessagesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"mpcchat"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TransferMessage

@implementation TransferMessage

@dynamic name;
@dynamic message;
@dynamic messageType;
@dynamic responseTime;

typedef struct TransferMessage__storage_ {
  uint32_t _has_storage_[1];
  TransferMessage_MsgType messageType;
  NSString *name;
  NSString *message;
  double responseTime;
} TransferMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .number = TransferMessage_FieldNumber_Name,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(TransferMessage__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "message",
        .number = TransferMessage_FieldNumber_Message,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(TransferMessage__storage_, message),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "messageType",
        .number = TransferMessage_FieldNumber_MessageType,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(TransferMessage__storage_, messageType),
        .defaultValue.valueEnum = TransferMessage_MsgType_Text,
        .dataTypeSpecific.enumDescFunc = TransferMessage_MsgType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "responseTime",
        .number = TransferMessage_FieldNumber_ResponseTime,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeDouble,
        .offset = offsetof(TransferMessage__storage_, responseTime),
        .defaultValue.valueDouble = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = TransferMessage_MsgType_EnumDescriptor },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\003\013\000\004\014\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferMessage class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(TransferMessage__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TransferMessage_MessageType_RawValue(TransferMessage *message) {
  GPBDescriptor *descriptor = [TransferMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferMessage_FieldNumber_MessageType];
  return GPBGetMessageInt32Field(message, field);
}

void SetTransferMessage_MessageType_RawValue(TransferMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [TransferMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferMessage_FieldNumber_MessageType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum TransferMessage_MsgType

GPBEnumDescriptor *TransferMessage_MsgType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Text", .number = TransferMessage_MsgType_Text },
      { .name = "Ping", .number = TransferMessage_MsgType_Ping },
      { .name = "Response", .number = TransferMessage_MsgType_Response },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TransferMessage_MsgType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:TransferMessage_MsgType_IsValidValue];
  }
  return descriptor;
}

BOOL TransferMessage_MsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case TransferMessage_MsgType_Text:
    case TransferMessage_MsgType_Ping:
    case TransferMessage_MsgType_Response:
      return YES;
    default:
      return NO;
  }
}


// @@protoc_insertion_point(global_scope)
